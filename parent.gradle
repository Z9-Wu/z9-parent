//gradle 8.1.1
ext {
    dependencyVersion = [
            springboot: "3.1.0",

            lombok    : "1.18.28",
            commons   : [//Can't use "-" in key
                         lang3: "3.12.0"
            ],

            springdoc   : "2.1.0",
            guava     : "32.0.1-jre",

            mybatis   : [
                    springboot: "3.0.2",
                    generator : "1.4.2"
            ],
            pagehelper: "5.3.3",
            mysql     : "8.0.33",

            //Z9 framework
            z9        : [
                    web: "1.0"
            ]
    ]
}

buildscript {
    repositories {
        maven { url 'https://repo.maven.apache.org/maven2' }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.1.0"
    }
}

apply plugin: "io.spring.dependency-management"

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

dependencyManagement {
    dependencies {
        dependency "org.springframework.boot:spring-boot-starter-web:$dependencyVersion.springboot"
        dependency "org.springframework.boot:spring-boot-starter-actuator:$dependencyVersion.springboot"

        dependency "org.projectlombok:lombok:$dependencyVersion.lombok"
        dependency "org.apache.commons:commons-lang3:$dependencyVersion.commons.lang3"

        dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:$dependencyVersion.springdoc"
//        dependency "com.google.guava:guava:$dependencyVersion.guava"

        dependency "org.mybatis.spring.boot:mybatis-spring-boot-starter:$dependencyVersion.mybatis.springboot"
        dependency "com.github.pagehelper:pagehelper:$dependencyVersion.pagehelper"
        dependency "com.mysql:mysql-connector-j:$dependencyVersion.mysql"
        dependency "org.mybatis.generator:mybatis-generator-core:$dependencyVersion.mybatis.generator"



        //Z9 framework
        dependency "com.z9.framework:z9-web:$dependencyVersion.z9.web"
    }
}



//Mybatis generator
def configDriverClass = "spring.datasource.driver-class-name"
def configConnectionURL = "spring.datasource.url"
def configUsername = "spring.datasource.username"
def configPassword = "spring.datasource.password"
def configIsGenerate = "app.mybatis.isGenerate"
configurations {
    mybatisGenerator
}
dependencies {
    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:$dependencyVersion.mybatis.generator"
    mybatisGenerator "mysql:mysql-connector-java:$dependencyVersion.mysql"
}
def getProperties = {




    def properties = new Properties()
    file("src/main/resources/application.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}
task mybatisGenerate {
    def properties = getProperties()
    def isMybatisGenerate = properties.getProperty(configIsGenerate)
    println isMybatisGenerate
    if ('true' != isMybatisGenerate){
        return
    }
    ant.properties[configDriverClass] = properties.getProperty(configDriverClass)
    ant.properties[configConnectionURL] = properties.getProperty(configConnectionURL)
    ant.properties[configUsername] = properties.getProperty(configUsername)
    ant.properties[configPassword] = properties.getProperty(configPassword)
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true, configfile: 'src/main/resources/generatorConfig.xml', verbose: true){
        propertyset {
            propertyref(name: configDriverClass)
            propertyref(name: configConnectionURL)
            propertyref(name: configUsername)
            propertyref(name: configPassword)
        }
    }
}
